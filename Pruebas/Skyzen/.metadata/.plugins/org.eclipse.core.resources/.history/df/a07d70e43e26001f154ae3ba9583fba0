package skyzen;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DateCell;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TextField;
import javafx.scene.control.Tooltip;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Popup;
import javafx.stage.Stage;
import javafx.util.Callback;

public class LoggedSession extends Skyzen {
	
	public DatePicker entryDatePicker;
	public DatePicker departureDatePicker;

    public void mostrarSesionIniciada(Stage primaryStage, String username) {
        Font customFont = Font.loadFont(getClass().getResourceAsStream("/soulwayfont-demo.otf"), 14);
        Font customFont2 = Font.loadFont(getClass().getResourceAsStream("/futura light bt.ttf"), 14);

        LocalTime now = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String formattedNow = now.isAfter(LocalTime.of(6, 0)) && now.isBefore(LocalTime.NOON) ? "Buenos días" : 
            now.isAfter(LocalTime.NOON) && now.isBefore(LocalTime.of(20, 0)) ? "Buenas tardes" : 
            "Buenas noches";

        Text loggedText = new Text(formattedNow + ", " + (username.isEmpty() ? "invitado" : username));
        loggedText.setFont(customFont);
        loggedText.setStyle("-fx-font-size: 20px;");

        VBox greetingBox = new VBox(loggedText);
        greetingBox.setAlignment(Pos.TOP_LEFT);
        greetingBox.setPadding(new Insets(10));

        greetingBox.setStyle("-fx-background-color: #ffffff; -fx-padding: 10px; -fx-background-radius: 0 0 10 0;");
        greetingBox.setTranslateX(-18);
        greetingBox.setTranslateY(2);
        greetingBox.setMaxWidth(100);
        
        Text origin = new Text("Seleccione su ubicación");
        origin.setFont(customFont2);
        origin.setStyle("-fx-font-size: 14px;");
        origin.setTranslateY(3);
        TextField originTextField = new TextField();
        originTextField.setPromptText("Su ubicación");
        originTextField.setMaxWidth(170);
        
        HBox originBox = new HBox(10);
        originBox.setTranslateX(30);
        originBox.setTranslateY(60);
        originBox.getChildren().addAll(origin, originTextField);
        
        Text distance = new Text("Seleccione el tipo de viaje");
        distance.setFont(customFont2);
        distance.setTranslateY(3);
        ComboBox<String> distanceComboBox = new ComboBox<>();
        distanceComboBox.getItems().addAll("Corta distancia", "Larga distancia");
        distanceComboBox.setPromptText("Selecciona la distancia");
        
        distanceComboBox.setOnAction(e -> {
            String selectedDistance = distanceComboBox.getSelectionModel().getSelectedItem();
        });
        
        HBox distanceBox = new HBox(25);
        distanceBox.getChildren().addAll(distance, distanceComboBox);
        distanceBox.setTranslateX(390);
        distanceBox.setTranslateY(18);
        
        Text entryDateText = new Text("Seleccione la fecha de ida");
        entryDateText.setFont(customFont2);
        entryDateText.setTranslateY(3);
        entryDateText.setStyle("-fx-font-size: 14px;");
        entryDatePicker = new DatePicker();
        entryDatePicker.setPromptText("Su fecha de entrada");
        entryDatePicker.setMaxWidth(170);

        Text departureDateText = new Text("Seleccione la fecha de vuelta");
        departureDateText.setFont(customFont2);
        departureDateText.setTranslateY(3);
        departureDateText.setStyle("-fx-font-size: 14px;");
        departureDatePicker = new DatePicker();
        departureDatePicker.setPromptText("Su fecha de vuelta");

        entryDatePicker.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                final LocalDate maxDate = newValue.plus(7, ChronoUnit.DAYS);

                departureDatePicker.setDayCellFactory(new Callback<DatePicker, DateCell>() {
                    public DateCell call(final DatePicker datePicker) {
                        return new DateCell() {
                            @Override
                            public void updateItem(LocalDate item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item.isAfter(maxDate) || item.isBefore(newValue)) {
                                    setDisable(true);
                                    setStyle("-fx-opacity: 0.5;");
                                }
                            }
                        };
                    }
                });
            }
        });

        HBox datePane = new HBox(25);
        datePane.getChildren().addAll(entryDateText, entryDatePicker, departureDateText, departureDatePicker);
        datePane.setTranslateX(30);
        datePane.setTranslateY(30);
        
        Text readBooksText = new Text("Introduzca libros leídos");
        readBooksText.setFont(customFont2);
        readBooksText.setStyle("-fx-font-size: 14px;");
        readBooksText.setTranslateX(-235);

        TextField booksTextField = new TextField();
        booksTextField.setPromptText("Escriba el título del libro");
        booksTextField.setTranslateX(20);
        booksTextField.setTranslateY(27);
        booksTextField.setMaxWidth(200);

        Popup autoCompletePopup = new Popup();
        ListView<String> autoCompleteListView = new ListView<>();
        autoCompleteListView.setMaxHeight(150);
        autoCompletePopup.getContent().add(autoCompleteListView);

        ObservableList<AllowedBooks> readBooksList = FXCollections.observableArrayList();
        ListView<AllowedBooks> readBooksListView = new ListView<>(readBooksList);
        readBooksListView.setTranslateX(-380);
        readBooksListView.setTranslateY(72);
        readBooksListView.setMaxWidth(280);
        readBooksListView.setMaxHeight(50);
        readBooksListView.setCellFactory(param -> new ListCell<AllowedBooks>() {
            @Override
            protected void updateItem(AllowedBooks book, boolean empty) {
                super.updateItem(book, empty);
                if (empty || book == null) {
                    setText(null);
                } else {
                    setText(book.getBook().getTitle() + " - " + book.getBook().getAuthor());
                    Tooltip tooltip = new Tooltip("Haz doble clic para mostrar más información");
                    setTooltip(tooltip);
                }
            }
        });

        booksTextField.textProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue.isEmpty()) {
                autoCompletePopup.hide();
            } else {
                List<String> filteredBooks = Stream.of(AllowedBooks.values())
                        .filter(book -> book.getBook().getTitle().toLowerCase().contains(newValue.toLowerCase()))
                        .map(book -> book.getBook().getTitle())
                        .collect(Collectors.toList());
                if (!filteredBooks.isEmpty()) {
                    autoCompleteListView.getItems().setAll(filteredBooks);
                    if (!autoCompletePopup.isShowing()) {
                        autoCompletePopup.show(booksTextField, 
                            primaryStage.getX() + booksTextField.localToScene(booksTextField.getBoundsInLocal()).getMinX(), 
                            primaryStage.getY() + booksTextField.localToScene(booksTextField.getBoundsInLocal()).getMaxY());
                    }
                } else {
                    autoCompletePopup.hide();
                }
            }
        });

        autoCompleteListView.setOnMouseClicked(event -> {
            String selectedBook = autoCompleteListView.getSelectionModel().getSelectedItem();
            if (selectedBook != null) {
                addBookToList(readBooksList, selectedBook);
                booksTextField.clear();
                autoCompletePopup.hide();
            }
        });

        booksTextField.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ENTER) {
                String inputText = booksTextField.getText();
                if (!inputText.isEmpty()) {
                    addBookToList(readBooksList, inputText);
                    booksTextField.clear();
                    autoCompletePopup.hide();
                }
            }
        });

        Button addBookButton = new Button("Agregar libro"); 
        addBookButton.setTranslateX(25);
        addBookButton.setTranslateY(27);
        addBookButton.setOnAction(e -> { 
            String inputText = booksTextField.getText();
            if (!inputText.isEmpty()) {
                addBookToList(readBooksList, inputText);
                booksTextField.clear();
                autoCompletePopup.hide();
            }
        });

        readBooksListView.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.BACK_SPACE) {
                AllowedBooks selectedBook = readBooksListView.getSelectionModel().getSelectedItem();
                if (selectedBook != null) {
                    readBooksList.remove(selectedBook);
                }
            }
        });
        
        readBooksListView.setOnMouseClicked(event -> {
            if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() == 2) {
                AllowedBooks selectedBook = readBooksListView.getSelectionModel().getSelectedItem();
                if (selectedBook != null) {
                    showBookCoverPopup(selectedBook.getBook());
                }
            }
        });

        HBox booksInputBox = new HBox(10, booksTextField, addBookButton, readBooksText, readBooksListView);
        booksInputBox.setPadding(new Insets(10));
        booksInputBox.setAlignment(Pos.CENTER_LEFT);
        booksInputBox.setTranslateY(10);
        
        Text additionalBooks = new Text("Introduzca libros adicionales");
        additionalBooks.setTranslateX(30);
        additionalBooks.setTranslateY(-20);
        additionalBooks.setFont(customFont2);
        Tooltip tooltip = new Tooltip("Realiza una búsqueda más avanzada en base a otros libros que hayas leído");
        Tooltip.install(additionalBooks, tooltip);

        TextField readBooksTextField = new TextField();
        readBooksTextField.setPromptText("Ingresa el título aquí");
        readBooksTextField.setTranslateX(-147);
        readBooksTextField.setTranslateY(5);
        ComboBox<Integer> ratingComboBox = new ComboBox<>();
        ratingComboBox.setMaxWidth(115);
        ratingComboBox.getItems().addAll(1, 2, 3, 4, 5);

        ratingComboBox.getItems().add(0, null);
        ratingComboBox.setPromptText("Puntuación");
        ratingComboBox.setTranslateX(-142);
        ratingComboBox.setTranslateY(5);

        ratingComboBox.setCellFactory(lv -> new ListCell<Integer>() {
            @Override
            protected void updateItem(Integer item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText("Puntuación");
                } else {
                    setText(item.toString());
                }
            }
        });

        ratingComboBox.valueProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal == null) {
                ratingComboBox.getSelectionModel().selectFirst();
            }
        });

        ObservableList<Book> bookList = FXCollections.observableArrayList();
        ListView<Book> listView = new ListView<>(bookList);
        listView.setMaxWidth(390);
        listView.setMaxHeight(50);
        listView.setTranslateX(-422);
        listView.setTranslateY(36);
        listView.setCellFactory(param -> new ListCell<Book>() {
            @Override
            protected void updateItem(Book book, boolean empty) {
                super.updateItem(book, empty);
                if (empty || book == null) {
                    setText(null);
                    setGraphic(null);
                } else {
                    GridPane gridPane = new GridPane();
                    Label titleLabel = new Label(book.getTitle());
                    Label ratingLabel = new Label("Puntuación: " + book.getRating());
                    gridPane.add(titleLabel, 0, 0);
                    gridPane.add(ratingLabel, 1, 0);
                    GridPane.setHgrow(titleLabel, javafx.scene.layout.Priority.ALWAYS);
                    setGraphic(gridPane);
                }
            }
        });

        Button addButton = new Button("Agregar libro");
        addButton.setTranslateX(-395);
        addButton.setTranslateY(6);
        Runnable addBook = () -> {
            String inputText = readBooksTextField.getText();
            Integer rating = ratingComboBox.getValue();
            if (!inputText.isEmpty() && rating != null) {
                if (!isBookAlreadyAddedRating(bookList, inputText)) { 
                    bookList.add(new Book(inputText, rating));
                    sortBookList(bookList);
                    readBooksTextField.clear();
                    ratingComboBox.setValue(null); 
                    ratingComboBox.setPromptText("Puntuación");
                } else {
                    Alert alert = new Alert(Alert.AlertType.WARNING);
                    alert.setTitle("Advertencia");
                    alert.setHeaderText(null);
                    alert.setContentText("El libro ya ha sido añadido.");
                    alert.showAndWait();
                }
            }
        };
        
        addButton.setOnAction(e -> addBook.run());

        readBooksTextField.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ENTER) {
                addBook.run();
            }
        });

        listView.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.BACK_SPACE) {
                Book selectedBook = listView.getSelectionModel().getSelectedItem();
                if (selectedBook != null) {
                    bookList.remove(selectedBook);
                }
            }
        });

        HBox inputBox = new HBox(10, additionalBooks, readBooksTextField, ratingComboBox, listView, addButton);
        inputBox.setTranslateY(100);
        
        Button resetButton = new Button("Restaurar valores");
        resetButton.setTranslateX(620);
        resetButton.setTranslateY(13);
        resetButton.setOnAction(e -> {
            boolean allFieldsEmpty = originTextField.getText().isEmpty() && distanceComboBox.getValue() == null && entryDatePicker.getValue() == null && departureDatePicker.getValue() == null && readBooksListView.getItems().isEmpty(); 
            if (allFieldsEmpty) {
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("Advertencia");
                alert.setHeaderText(null);
                alert.setContentText("No hay valores para restablecer");
                alert.showAndWait();
            } else {
                originTextField.clear();
                distanceComboBox.getSelectionModel().clearSelection();
                entryDatePicker.setValue(null);
                departureDatePicker.setValue(null);
                readBooksListView.getItems().clear(); 
                listView.getItems().clear();
            }
        });
        resetButton.setTranslateY(175);
        
        Button collectButton = new Button("Enviar datos");
        collectButton.setTranslateX(750);
        collectButton.setTranslateY(132);
        collectButton.setOnAction(e -> {
            if (originTextField.getText().isEmpty() || distanceComboBox.getValue() == null || entryDatePicker.getValue() == null || departureDatePicker.getValue() == null || readBooksList.isEmpty() || bookList.isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("Advertencia");
                alert.setHeaderText(null);
                alert.setContentText("Rellene todos los campos");
                alert.showAndWait();
            } else {
                UserData ud = new UserData();
                ud.setOrigin(originTextField.getText());
                ud.setDistance(distanceComboBox.getValue());
                ud.setEntryDate(entryDatePicker.getValue());
                ud.setDepartureDate(departureDatePicker.getValue());
                ud.setReadBooks(readBooksList.stream()
                        .collect(Collectors.toList()));
                ud.setAdditionalBooks(bookList.stream()
                        .map(Book::getTitle)
                        .collect(Collectors.toList()));
                showLoadingScreen(primaryStage, () -> {
                    if (ud.calculaValoracionMaxima().get().getKey().equals("América")) {
                        AmericanCountries ac = new AmericanCountries();
                        ac.start(primaryStage, entryDatePicker.getValue(), departureDatePicker.getValue());
                    } else if (ud.calculaValoracionMaxima().get().getKey().equals("Norte")){
                    	NorthEuropeanCountries np = new NorthEuropeanCountries();
                    	np.start(primaryStage, entryDatePicker.getValue(), departureDatePicker.getValue());
                    } else if (ud.calculaValoracionMaxima().get().getKey().equals("Asia")) {
                    	SouthEastCountries sec = new SouthEastCountries();
                    	sec.start(primaryStage, entryDatePicker.getValue(), departureDatePicker.getValue());
                    } else if (ud.calculaValoracionMaxima().get().getKey().equals("África")) {
                    	AfricanCountries afc = new AfricanCountries();
                    	afc.start(primaryStage, entryDatePicker.getValue(), departureDatePicker.getValue());
                    } else if (ud.calculaValoracionMaxima().get().getKey().equals("Oceanía")){
                    	OceanicCountries oc = new OceanicCountries();
                    	oc.start(primaryStage);
                    }
                });
            }
        });
        collectButton.setTranslateY(129);
        
        Hyperlink backLink;
        if(username.isEmpty()) {
        	backLink = new Hyperlink("Regresar a la pantalla inicial");
        	backLink.setFont(customFont2);
        	backLink.setTranslateX(660);
        	backLink.setTranslateY(-430);
        	backLink.setOnAction(event -> {
        		mostrarPantallaInicial(primaryStage);
        	});        	
        } else {
        	backLink = new Hyperlink("Cerrar sesión");
        	backLink.setFont(customFont2);
        	backLink.setTranslateX(735);
        	backLink.setTranslateY(-430);
        	backLink.setOnAction(event -> {
        		mostrarPantallaInicial(primaryStage);
        	});   
        }
        
        VBox vbox2 = new VBox(20);
        vbox2.setAlignment(Pos.CENTER_LEFT);
        vbox2.setPadding(new Insets(10));
        vbox2.getChildren().addAll(greetingBox, originBox, distanceBox, datePane, booksInputBox, inputBox, resetButton, collectButton, backLink);
        vbox2.setTranslateY(-60);
        
        BorderPane root = new BorderPane();
        root.setCenter(vbox2);
        root.setStyle("-fx-background-color: #F5EFED; -fx-padding: 5px; -fx-border-color: white; -fx-border-width: 10px; -fx-border-radius: 10px;");

        Scene scene = new Scene(root, 900, 600);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Sesión iniciada");
        primaryStage.show();
        
        scene.setOnMouseClicked(e -> {
            scene.getRoot().requestFocus();
        });
    }
    
    private boolean isBookAlreadyAdded(ObservableList<AllowedBooks> readBooksList, String bookTitle) {
        for (AllowedBooks book : readBooksList) {
            if (book.getBook().getTitle().equalsIgnoreCase(bookTitle)) {
                return true;
            }
        }
        return false;
    }
    
    private boolean isBookAlreadyAddedRating(ObservableList<Book> bookList, String bookTitle) {
        for (Book book : bookList) {
            if (book.getTitle().equalsIgnoreCase(bookTitle)) {
                return true;
            }
        }
        return false;
    }
    
    private void addBookToList(ObservableList<AllowedBooks> readBooksList, String bookTitle) {
        if (isBookAlreadyAdded(readBooksList, bookTitle)) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Advertencia");
            alert.setHeaderText(null);
            alert.setContentText("El libro ya ha sido añadido.");
            alert.showAndWait();
        } else {
            for (AllowedBooks book : AllowedBooks.values()) {
                if (book.getBook().getTitle().equalsIgnoreCase(bookTitle)) {
                    readBooksList.add(book);
                    return;
                }
            }
        }
    }
    
    private void sortBookList(ObservableList<Book> observableList) {
        FXCollections.sort(observableList, Comparator.comparingInt(Book::getRating).reversed());
    }
    
    public static void showLoadingScreen(Stage primaryStage, Runnable onLoadingComplete) {
        StackPane root = new StackPane();
        Label loadingLabel = new Label("Iniciando motores.");

        ProgressIndicator progressIndicator = new ProgressIndicator();
        progressIndicator.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);

        root.getChildren().addAll(progressIndicator, loadingLabel);

        StackPane.setAlignment(progressIndicator, javafx.geometry.Pos.CENTER);
        StackPane.setAlignment(loadingLabel, javafx.geometry.Pos.BOTTOM_CENTER);
        loadingLabel.setTranslateY(-30);

        Scene loadingScene = new Scene(root, 900, 600);
        primaryStage.setScene(loadingScene);
        primaryStage.show();

        new Thread(() -> {
            try {
                String[] messages = {"Preparando resultados..", "Hecho..."};
                for (String message : messages) {
                    Thread.sleep(800);
                    Platform.runLater(() -> loadingLabel.setText(message));
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            Platform.runLater(onLoadingComplete);
        }).start();
    }
    
    public void mostrarPantallaInicial(Stage primaryStage) {
        Skyzen skyzen = new Skyzen();
        skyzen.start(primaryStage);
    }
    
    private void showBookCoverPopup(Book book) {
        if (book.getImageUrl() == null || book.getImageUrl().isEmpty()) {
            Alert warningAlert = new Alert(Alert.AlertType.WARNING);
            warningAlert.setTitle("Información inexistente");
            warningAlert.setHeaderText(null);
            warningAlert.setContentText("No hay información disponible para este libro.");
            warningAlert.showAndWait();
            return;
        }
    	
        Alert alert = new Alert(Alert.AlertType.NONE);
        alert.setTitle("Información del libro");
        alert.setHeaderText(null);

        ImageView bookCover = new ImageView(new String(book.getImageUrl()));
        bookCover.setFitHeight(200);
        bookCover.setPreserveRatio(true);

        Text titleText = new Text(book.getTitle());
        titleText.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        Text authorText = new Text(book.getAuthor());
        authorText.setStyle("-fx-font-size: 14px; -fx-font-weight: normal;");

        VBox textContainer = new VBox(5);
        textContainer.getChildren().addAll(titleText, authorText);

        HBox contentContainer = new HBox(10);
        contentContainer.getChildren().addAll(bookCover, textContainer);
        contentContainer.setAlignment(Pos.CENTER_LEFT);

        String plot = book.getPlot();
        if (plot.length() > 200) {
            plot = plot.substring(0, 250) + "...";
        }

        Text synopsisTitle = new Text("Sinopsis");
        synopsisTitle.setStyle("-fx-font-size: 14px; -fx-font-weight: bold;");

        Text synopsisText = new Text(plot);
        synopsisText.setWrappingWidth(400);

        VBox alertContent = new VBox(10);
        alertContent.getChildren().addAll(contentContainer, synopsisTitle, synopsisText);
        alertContent.setPadding(new Insets(20)); 

        alert.getDialogPane().setContent(alertContent);

        ButtonType closeButton = new ButtonType("Cerrar", ButtonType.CANCEL.getButtonData());
        alert.getButtonTypes().setAll(closeButton);

        alert.setOnCloseRequest(event -> {
            alert.close();
        });

        alert.showAndWait();
    }
    
    public int calculateVisitDuration(LocalDate inDate, LocalDate outDate) {
        return (int) inDate.until(outDate.plusDays(1)).getDays();
    }
    
	public static void main(String[] args) {
		launch(args);	
	}

}