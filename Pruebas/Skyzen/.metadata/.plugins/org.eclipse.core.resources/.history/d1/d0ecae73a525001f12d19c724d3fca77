package skyzen;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class UserData {
    private String origin;
    private String distance;
    private LocalDate entryDate;
    private LocalDate departureDate;
    private List<AllowedBooks> readBooks;
    private List<String> additionalBooks;

    public UserData(String origin, String distance, LocalDate entryDate, LocalDate departureDate, List<AllowedBooks> readBooks, List<String> additionalBooks, String genre) {
        this.origin = origin;
        this.distance = distance;
        this.entryDate = entryDate;
        this.departureDate = departureDate;
        this.readBooks = readBooks;
        this.additionalBooks = additionalBooks;
    }

    public UserData() {
        this.readBooks = new ArrayList<>();
        this.additionalBooks = new ArrayList<>();
    }

    public void setOrigin(String origin) {
        this.origin = origin;
    }

    public void setDistance(String distance) {
        this.distance = distance;
    }

    public void setEntryDate(LocalDate entryDate) {
        this.entryDate = entryDate;
    }

    public void setDepartureDate(LocalDate departureDate) {
        this.departureDate = departureDate;
    }

    public void setReadBooks(List<AllowedBooks> readBooks) {
        this.readBooks = readBooks;
    }

    public void setAdditionalBooks(List<String> additionalBooks) {
        this.additionalBooks = additionalBooks;
    }
    
    // ALGORITMO DE BÚSQUEDA
    public Map<String, Integer> calculoValoraciones() {
        Map<String, Integer> valoracion = new HashMap<>();
        Map<String, Integer> valoracionesPorPais = new HashMap<>();
        
        valoracionesPorPais.put("Norte", 0);
        valoracionesPorPais.put("Asia", 0);
        valoracionesPorPais.put("Oceanía", 0);
        valoracionesPorPais.put("América", 0);
        valoracionesPorPais.put("África", 0);

        int valoracionPorLibro = determinarValoracionPorLibro(readBooks.size());
        
        for (AllowedBooks allowedBook : readBooks) {
            String country = allowedBook.getBook().getCountry();
            if (valoracionesPorPais.containsKey(country)) {
                valoracionesPorPais.put(country, valoracionPorLibro);
            }
        }
        
        return valoracionesPorPais;
    }

    private int determinarValoracionPorLibro(int cantidadLibros) {
        if (cantidadLibros == 1) {
            return 100;
        } else if (cantidadLibros >= 2 && cantidadLibros <= 5) {
            return 20;
        } else {
            return 10;
        }
    }
    
    
    
    /////
    public int evaluateDestination() {
        int score = calculateAuthorExperienceScore() + calculateReadBooksScore() + calculateDistanceScore() + calculateDurationScore();

        if (score > 100) {
            score = 100;
        }

        return score;
    }

    private int calculateAuthorExperienceScore() {
        Set<String> uniqueBooks = new HashSet<>(readBooks);
        int numUniqueBooks = uniqueBooks.size();
        int maxBooksConsidered = 10;
        int score = (int) ((numUniqueBooks * (double) maxBooksConsidered) / 2);

        return score;
    }

    private int calculateReadBooksScore() {
        int numReadBooks = readBooks.size();
        int maxBooksConsidered = 10;
        int score = (int) ((numReadBooks * (double) 10) / 2);

        return score;
    }

    private int calculateDistanceScore() {
        if (distance.equals("Corta distancia")) {
            return 15; 
        } else {
            return 30;
        }
    }

    private int calculateDurationScore() {
        LocalDate currentDate = LocalDate.now();
        long daysUntilDeparture = java.time.temporal.ChronoUnit.DAYS.between(currentDate, departureDate);
        
        if (daysUntilDeparture < 7) {
            return 6;
        }
        else if (daysUntilDeparture < 30) {
            return 12;
        }
        else if (daysUntilDeparture < 90) {
            return 18;
        }
        else {
            return 4;
        }
    }
}
